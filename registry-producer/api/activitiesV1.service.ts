/**
 * Activity Api Definitions
 * This is a project for definitions of resource service.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ActivityList } from '../model/activityList';
import { ActivityResource } from '../model/activityResource';
import { ApiErrorResponse } from '../model/apiErrorResponse';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ActivitiesV1Service {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param userId The user id to retrieve activity of an user
     * @param resourceId The item resource id to retrieve activity of an item
     * @param actionName The action name
     * @param fromDate The from date
     * @param toDate The to date
     * @param serviceId The resource initiator service name
     * @param pageNo The resource initiator page number
     * @param size 
     * @param order 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activities(userId?: string, resourceId?: string, actionName?: string, fromDate?: string, toDate?: string, serviceId?: string, pageNo?: string, size?: string, order?: string, observe?: 'body', reportProgress?: boolean): Observable<ActivityList>;
    public activities(userId?: string, resourceId?: string, actionName?: string, fromDate?: string, toDate?: string, serviceId?: string, pageNo?: string, size?: string, order?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActivityList>>;
    public activities(userId?: string, resourceId?: string, actionName?: string, fromDate?: string, toDate?: string, serviceId?: string, pageNo?: string, size?: string, order?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActivityList>>;
    public activities(userId?: string, resourceId?: string, actionName?: string, fromDate?: string, toDate?: string, serviceId?: string, pageNo?: string, size?: string, order?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('user_id', <any>userId);
        }
        if (resourceId !== undefined && resourceId !== null) {
            queryParameters = queryParameters.set('resource_id', <any>resourceId);
        }
        if (actionName !== undefined && actionName !== null) {
            queryParameters = queryParameters.set('action_name', <any>actionName);
        }
        if (fromDate !== undefined && fromDate !== null) {
            queryParameters = queryParameters.set('from_date', <any>fromDate);
        }
        if (toDate !== undefined && toDate !== null) {
            queryParameters = queryParameters.set('to_date', <any>toDate);
        }
        if (serviceId !== undefined && serviceId !== null) {
            queryParameters = queryParameters.set('service_id', <any>serviceId);
        }
        if (pageNo !== undefined && pageNo !== null) {
            queryParameters = queryParameters.set('pageNo', <any>pageNo);
        }
        if (size !== undefined && size !== null) {
            queryParameters = queryParameters.set('size', <any>size);
        }
        if (order !== undefined && order !== null) {
            queryParameters = queryParameters.set('order', <any>order);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ActivityList>(`${this.configuration.basePath}/api/v1/activities`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param activityId Id of current getting resource
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public activityById(activityId: string, observe?: 'body', reportProgress?: boolean): Observable<ActivityResource>;
    public activityById(activityId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ActivityResource>>;
    public activityById(activityId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ActivityResource>>;
    public activityById(activityId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (activityId === null || activityId === undefined) {
            throw new Error('Required parameter activityId was null or undefined when calling activityById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<ActivityResource>(`${this.configuration.basePath}/api/v1/activities/${encodeURIComponent(String(activityId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
